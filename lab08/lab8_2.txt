------------------------------------------------------------------------------------------------------------------
a. 
i. 
Composable UI means that the components that make up the UI are modular (and, well, composable); the app "return[s] a tree of components that you built." It makes reading and modifying the frontend code manageable.

ii.
It transforms its syntax into plain JavaScript. This means you can write code that is semantically JavaScript, but is a lot more readable.

iii.
Components higher in the hierarchy pass their data down to their children. For example, a Commment's data is "accessible as a 'property'" and the data was passed down from the CommentList. Comment data is stored in comments.json in JSON format. When the state is updated, an ajax request is sent to the server to fetch/load the comments from the server. Comments are created using HTML forms - when the form is submitted, comments.json is modified to reflect the submission, and when the comments are next fetched, they will appear on the webpage.

iv.
props are immutable. state is mutable. Since props are passed from and own by the parent, they must remain immutable; otherwise, such components would stop being composable. State, then, is what allows interaction, since its private to each component. Whenever state is updated, the component is re-rendered.

------------------------------------------------------------------------------------------------------------------

b.
i.
Upon adding a legal comment, the webpage instantly updated to reflect the change I made to comments.json. This is because the CommentBox updates every 2 seconds to check if there were changes to comments.json.

ii.
Adding a comment doesn't mean the state changed, so it follows that the CommentList doesn't need to be re-rendered.

iii.
For one, it makes debugging easier. Additionally, if they didn't always represent the state of the view, then when they were finally updated to represent the state of the view, the application would feel sluggish and un-responsive, or at the very least unpredictable. From an end-user's standpoint, that's a nightmare to use. 

iv.
They're optimistic updates, after all. I think the app is assuming that comments will never be rejected by the server. It's hardly robust, but a robust app is a cynical one.
------------------------------------------------------------------------------------------------------------------